"""Example usage patterns for end-to-end testing.

This file demonstrates how to use the e2e testing infrastructure for various scenarios.
Run these commands from the project root directory.
"""

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def print_examples():
    """Print example commands for e2e testing."""
    
    logger.info("=" * 80)
    logger.info("END-TO-END TESTING EXAMPLES")
    logger.info("=" * 80)
    logger.info("")
    
    logger.info("1. GENERATE TEST DATA")
    logger.info("-" * 80)
    logger.info("Generate ~10,000 files (default):")
    logger.info("  python tests_e2e\\generate_test_data.py --output-dir C:\\temp\\e2e_test_data")
    logger.info("")
    logger.info("Generate custom number of files:")
    logger.info("  python tests_e2e\\generate_test_data.py --output-dir C:\\temp\\e2e_test_data --total-files 5000")
    logger.info("")
    
    logger.info("2. RUN SCANNER AND ANALYZE")
    logger.info("-" * 80)
    logger.info("Basic scan with analysis:")
    logger.info("  python tests_e2e\\run_scanner_and_analyze.py --test-data-dir C:\\temp\\e2e_test_data")
    logger.info("")
    logger.info("Scan with custom parameters:")
    logger.info("  python tests_e2e\\run_scanner_and_analyze.py `")
    logger.info("    --test-data-dir C:\\temp\\e2e_test_data `")
    logger.info("    --worker-threads 8 `")
    logger.info("    --use-exiftool `")
    logger.info("    --use-ffprobe")
    logger.info("")
    logger.info("Analyze existing results (skip scan):")
    logger.info("  python tests_e2e\\run_scanner_and_analyze.py `")
    logger.info("    --test-data-dir C:\\temp\\e2e_test_data `")
    logger.info("    --skip-scan")
    logger.info("")
    
    logger.info("3. TESTING SCENARIOS")
    logger.info("-" * 80)
    logger.info("")
    logger.info("A. Initial Scan Testing:")
    logger.info("   1. Generate test data")
    logger.info("   2. Run scanner with analysis")
    logger.info("   3. Verify all files processed correctly")
    logger.info("   4. Delete database")
    logger.info("   5. Repeat steps 2-3 to test repeatability")
    logger.info("")
    logger.info("B. Rescan Testing:")
    logger.info("   1. Generate test data")
    logger.info("   2. Run initial scan")
    logger.info("   3. Run scan again (rescan) - should detect unchanged files")
    logger.info("   4. Modify some files")
    logger.info("   5. Run scan again - should detect changes")
    logger.info("   6. Compare analysis results")
    logger.info("")
    logger.info("C. Load Testing:")
    logger.info("   1. Generate large dataset (e.g., --total-files 50000)")
    logger.info("   2. Run scanner with different thread counts")
    logger.info("   3. Measure performance (check log timestamps)")
    logger.info("   4. Compare results for consistency")
    logger.info("")
    logger.info("D. Error Handling Testing:")
    logger.info("   1. Generate test data (includes corrupted files)")
    logger.info("   2. Run scanner")
    logger.info("   3. Check analysis.json for error_summary")
    logger.info("   4. Verify scanner continues despite errors")
    logger.info("")
    
    logger.info("4. OUTPUT FILES")
    logger.info("-" * 80)
    logger.info("After running, you'll find:")
    logger.info("  - media.db: Scanner database with all metadata")
    logger.info("  - scan.log: Complete scanner log output")
    logger.info("  - analysis.json: Detailed analysis results")
    logger.info("")
    logger.info("Analysis JSON contains:")
    logger.info("  - filesystem: File counts by type and album")
    logger.info("  - database: Database statistics and counts")
    logger.info("  - log_analysis: Log file statistics")
    logger.info("  - comparison: Filesystem vs database comparison")
    logger.info("  - unprocessed_files: List of files not in database")
    logger.info("  - matching_statistics: NEW - 4-phase matching algorithm results")
    logger.info("  - errors: Any errors encountered")
    logger.info("")
    
    logger.info("5. WORKFLOW EXAMPLE")
    logger.info("-" * 80)
    logger.info("Complete workflow for initial scan testing:")
    logger.info("")
    logger.info("# Step 1: Generate test data")
    logger.info("python tests_e2e\\generate_test_data.py --output-dir C:\\temp\\e2e_test_data")
    logger.info("")
    logger.info("# Step 2: Run scanner and analyze")
    logger.info("python tests_e2e\\run_scanner_and_analyze.py --test-data-dir C:\\temp\\e2e_test_data")
    logger.info("")
    logger.info("# Step 3: Review results")
    logger.info("# - Check console output for summary")
    logger.info("# - Open C:\\temp\\e2e_test_data\\analysis.json for details")
    logger.info("# - Look for matching algorithm statistics")
    logger.info("")
    logger.info("# Step 4: Test rescan")
    logger.info("python tests_e2e\\run_scanner_and_analyze.py --test-data-dir C:\\temp\\e2e_test_data")
    logger.info("")
    logger.info("# Step 5: Compare analysis.json files to verify rescan behavior")
    logger.info("")
    
    logger.info("6. MATCHING ALGORITHM VALIDATION")
    logger.info("-" * 80)
    logger.info("The e2e tests now validate the new 4-phase matching algorithm:")
    logger.info("")
    logger.info("Phase 1 (Happy Path):")
    logger.info("  - Tests exact filename + extension matches")
    logger.info("  - Validates proper exclusion of matched pairs")
    logger.info("")
    logger.info("Phase 2 (Numbered Files):")
    logger.info("  - Tests files with numeric suffixes (1), (2)")
    logger.info("  - Validates suffix extraction and matching")
    logger.info("")
    logger.info("Phase 3 (Edited Files):")
    logger.info("  - Tests files with -edited suffix (case-insensitive)")
    logger.info("  - Validates stripping and subsequent matching")
    logger.info("")
    logger.info("Phase 4 (Unmatched Analysis):")
    logger.info("  - Identifies remaining unmatched files")
    logger.info("  - Provides detailed statistics for each phase")
    logger.info("")
    logger.info("Expected Results:")
    logger.info("  - High match rate (>85%)")
    logger.info("  - Low number of unmatched files")
    logger.info("  - No multiple sidecars warnings")
    logger.info("  - Proper exclusion logic (no file in multiple phases)")
    logger.info("")
    
    logger.info("7. NOTES")
    logger.info("-" * 80)
    logger.info("- Test data generation requires PIL (Pillow) for image creation")
    logger.info("- Without PIL, placeholder binary files are created")
    logger.info("- Scanner requires the media-scanner package to be installed")
    logger.info("- Use --use-exiftool and --use-ffprobe only if tools are installed")
    logger.info("- Generated data is fully synthetic (no personal information)")
    logger.info("- Test data can be safely deleted after testing")
    logger.info("")
    
    logger.info("=" * 80)


if __name__ == "__main__":
    print_examples()
